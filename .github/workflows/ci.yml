name: CD Pipeline

on:
  push:
    branches: [ prod ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Hetzner Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT }}
        script: |
          set -e
          
          # Define application directory in hetzner user's home directory
          APP_DIR="/home/${{secrets.HETZNER_USER}}/markboard"
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Create application directory if it doesn't exist (no sudo needed in user's home)
          if [ ! -d "$APP_DIR" ]; then
            echo "Creating application directory..."
            mkdir -p $APP_DIR
          fi
          
          # Navigate to application directory
          cd $APP_DIR
          
          # Clone or update repository
          if [ ! -d ".git" ]; then
            echo "Cloning repository..."
            git clone $REPO_URL .
          else
            echo "Updating repository..."
            git fetch origin
            git reset --hard origin/prod
            git clean -fd
          fi
          
          # Create .env file from GitHub secret
          echo "Creating production environment file..."
          echo '${{ secrets.ENV_FILE }}' > .env
          
          # Stop existing containers (only for this project)
          echo "Stopping existing containers..."
          docker compose down --remove-orphans || true
          
          # Remove only this project's Docker images and containers to free space
          echo "Cleaning up project Docker resources..."
          docker compose down --volumes --remove-orphans || true
          
          # Remove only markboard-related images and containers
          echo "Removing old markboard images..."
          docker images --filter "label=app=markboard" -q | xargs -r docker rmi -f || true
          docker container prune -f --filter "label=app=markboard" || true
          
          # Build and start services
          echo "Building and starting services..."
          docker compose up -d --build --remove-orphans
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Verify deployment
          echo "Verifying deployment..."
          if docker compose ps | grep -q "Up"; then
            echo "üöÄ Deployment completed successfully!"
          else
            echo "‚ùå Deployment verification failed!"
            docker compose logs --tail=50
            exit 1
          fi
          
          # Show container status
          docker compose ps