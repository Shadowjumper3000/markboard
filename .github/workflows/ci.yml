name: CD Pipeline

on:
  push:
    branches: [ prod ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod'
    
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Hetzner Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT }}
        script: |
          set -e
          
          # Define application directory
          APP_DIR="/opt/markboard"
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Create application directory if it doesn't exist
          if [ ! -d "$APP_DIR" ]; then
            echo "Creating application directory..."
            sudo mkdir -p $APP_DIR
            sudo chown $USER:$USER $APP_DIR
          fi
          
          # Navigate to application directory
          cd $APP_DIR
          
          # Clone or update repository
          if [ ! -d ".git" ]; then
            echo "Cloning repository..."
            git clone $REPO_URL .
          else
            echo "Updating repository..."
            git fetch origin
            git reset --hard origin/prod
          fi
          
          # Create .env file from GitHub secret
          echo "Creating production environment file..."
          echo '${{ secrets.ENV_FILE }}' > .env
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker compose down || true
          
          # Remove old images to free space
          echo "Cleaning up old Docker images..."
          docker system prune -f
          
          # Build and start services
          echo "Building and starting services..."
          docker compose up -d --build --remove-orphans
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          echo "ðŸš€ Deployment completed successfully!"
          
          # Show container status
          docker compose ps